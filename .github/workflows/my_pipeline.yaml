name: Java CI/CD Pipeline with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4
      with:
        maven-version: '3.9.2'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Increment stable version number
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $CURRENT_VERSION"
        
        BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
        IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"

        while [ ${#VERSION_PARTS[@]} -lt 3 ]; do
          VERSION_PARTS+=("0")
        done

        NEW_PATCH_VERSION=$((VERSION_PARTS[2] + 1))
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"

        echo "New version: $NEW_VERSION"
        
        mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false

        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Build and test the project
      run: mvn clean install

    - name: Package the .jar file
      run: mvn package

    - name: Upload .jar as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app
        path: target/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: my-app
        path: target

    - name: Extract version from pom.xml
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//')  # Remove -SNAPSHOT if present
        echo "VERSION=$VERSION" >> $GITHUB_ENV  # Save version for later steps

    # Login to Docker Hub
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

    - name: Tag Docker Image
      run: docker tag java-app:$VERSION ${{ secrets.DOCKER_USER }}/do22:$VERSION

    - name: Push Docker Image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USER }}/do22:$VERSION
